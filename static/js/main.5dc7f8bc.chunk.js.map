{"version":3,"sources":["../../src/SchedulerHeader/SchedulerDatePicker.js","../../src/SchedulerHeader/ViewMode.js","../../src/SchedulerHeader/ShiftList.js","../../src/SchedulerHeader/index.js","../../src/ResourceView/ResourceViewHeader.js","../../src/ResourceView/ResourceCellContent.js","../../src/ResourceView/ResourceViewBody.js","../../src/ResourceView/index.js","../../src/SchedulerView/SchedulerViewHeader.js","../../src/shared/Method.js","../../src/SchedulerView/Cell.js","../../src/SchedulerView/PopoverContent.js","../../src/SchedulerView/SchedulerViewBody.js","../../src/SchedulerView/index.js","../../src/index.js","SampleData.js","App.js","index.js"],"names":["SchedulerDatePicker","useContext","updateConfig","defaultDate","useState","currentDate","setCurrentDate","useEffect","onClick","moment","style","border","icon","picker","className","styles","bordered","value","onChange","date","suffixIcon","allowClear","ViewMode","mode","setMode","view","e","marginBottom","key","item","viewType","TaskCard","shiftType","id","start","end","drag","useDrag","type","collect","isDragging","monitor","ref","ShiftList","shiftTypes","shift","Title","Typography","SchedulerHeader","schedulerTitle","FullWidth","justify","DateContainer","ResourcesHeader","resourceTitle","resourcesViewWidth","width","columns","title","ResourceCellContent","text","record","cellHeight","displayAvatar","resourceCellContent","height","content","renderCellContent","renderAvatar","marginRight","size","align","ResourcesBody","dataIndex","render","resources","group","maxHeight","pagination","dataSource","index","SchedulerViewHeader","days","schedulerViewWidth","headerColumns","getCellHeight","Cell","paddingArr","cellData","children","slotId","resource","cellBgColor","cellBgHoverColor","cellPadding","dateFormat","onShiftDrop","useDrop","accept","drop","droppedEvent","uuidv4","event","existedShiftInCell","evt","message","isOver","backgroundColor","padding","PopoverContent","cellPopoverWidth","firstAction","secondAction","firstActionName","secondActionName","color","SchedulerViewBody","events","resourcesList","columnData","i","eventOnThisDate","placement","trigger","ignore","Header","weekStart","SchedulerDataContext","createContext","ViewTypes","Day","Week","Month","userEvents","userConfig","config","getSchedulerData","window","windowWidth","setWindowWidth","Math","formattedUserEvents","schedulerWidth","locale","viewName","setConfig","SchedulerData","args","backend","HTML5Backend","colSpan","sampleEvents","sampleShiftTypes","name","sampleResources","role","App","data","setData","startOfMonth","startOf","endOfMonth","endOf","pStyle","margin","shiftInMonth","filter","fontSize","display","length","success","JSON","stringify","prev","schedulerData","console","log","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.5dc7f8bc.chunk.js","sourcesContent":["import React, { useState, useEffect, useContext } from 'react'\nimport { Col, Button, DatePicker } from 'antd'\nimport { LeftOutlined, RightOutlined } from '@ant-design/icons'\nimport styles from './styles.module.css'\nimport moment from 'moment'\nimport { SchedulerDataContext } from '../index'\n\nconst SchedulerDatePicker = () => {\n  // context\n  const {\n    updateConfig,\n    config: { currentDate: defaultDate }\n  } = useContext(SchedulerDataContext)\n\n  const [currentDate, setCurrentDate] = useState(defaultDate)\n\n  // Previous time\n  const onPrev = () => {\n    setCurrentDate((prev) => moment(prev).subtract(1, 'week'))\n  }\n\n  // Next time\n  const onNext = () => {\n    setCurrentDate((prev) => moment(prev).add(1, 'week'))\n  }\n\n  // Listen to date change\n  const dateChange = (date) => {\n    setCurrentDate(date)\n  }\n\n  // Update the currentDate to global context\n  useEffect(() => {\n    updateConfig({ currentDate: currentDate })\n  }, [currentDate])\n\n  return (\n    <Col>\n      <Button\n        onClick={onPrev}\n        style={{ border: 'none' }}\n        icon={<LeftOutlined />}\n      />\n      <DatePicker\n        picker='week'\n        className={styles.input}\n        bordered={false}\n        value={currentDate}\n        onChange={dateChange}\n        suffixIcon={null}\n        allowClear={false}\n      />\n      <Button\n        onClick={onNext}\n        style={{ border: 'none' }}\n        icon={<RightOutlined />}\n      />\n    </Col>\n  )\n}\n\nexport default SchedulerDatePicker\n","import React, { useState, useContext } from 'react'\nimport { Col, Radio } from 'antd'\nimport { SchedulerDataContext } from '../index'\n\nconst ViewMode = () => {\n  const [mode, setMode] = useState('week')\n\n  // context\n  const {\n    config: { view }\n  } = useContext(SchedulerDataContext)\n\n  // Handle view mode change\n  const modeChange = (e) => {\n    const { value } = e.target\n    setMode(value)\n  }\n  return (\n    <Col>\n      <Radio.Group\n        onChange={modeChange}\n        value={mode}\n        style={{ marginBottom: 8 }}\n      >\n        {view.map((item) => (\n          <Radio.Button key={item.viewType} value={item.viewType}>\n            {item.viewName}\n          </Radio.Button>\n        ))}\n      </Radio.Group>\n    </Col>\n  )\n}\n\nexport default ViewMode\n","import React, { useContext } from 'react'\nimport { useDrag } from 'react-dnd'\nimport styles from './styles.module.css'\nimport { SchedulerDataContext } from '../index'\n\nconst TaskCard = ({ shiftType, id, start, end }) => {\n  // useDrag\n  const [{ isDragging }, drag] = useDrag({\n    item: {\n      type: 'shift',\n      id: id,\n      shiftType: shiftType,\n      start: start,\n      end: end\n    },\n    collect: (monitor) => ({\n      isDragging: !!monitor.isDragging()\n    })\n  })\n\n  return (\n    <div className={styles.TaskCard} ref={drag}>\n      {shiftType}\n    </div>\n  )\n}\n\nconst ShiftList = () => {\n  const { shiftTypes } = useContext(SchedulerDataContext)\n  return (\n    <React.Fragment>\n      {!!shiftTypes &&\n        shiftTypes.map((shift) => (\n          <TaskCard\n            key={shift.id}\n            shiftType={shift.name}\n            id={shift.id}\n            start={shift.start}\n            end={shift.end}\n          />\n        ))}\n    </React.Fragment>\n  )\n}\n\nexport default ShiftList\n","import React, { useContext } from 'react'\nimport { Row, Typography } from 'antd'\nimport styles from './styles.module.css'\nimport { SchedulerDataContext } from '../index'\nimport SchedulerDatePicker from './SchedulerDatePicker'\nimport ViewMode from './ViewMode'\nimport ShiftList from './ShiftList'\n\nconst { Title } = Typography\n\nconst SchedulerHeader = () => {\n  const {\n    config: { schedulerTitle }\n  } = useContext(SchedulerDataContext)\n\n  return (\n    <Row className={styles.FullWidth}>\n      <Title className={styles.Title}>{schedulerTitle}</Title>\n      <Row justify='space-between' className={styles.FullWidth}>\n        <Row justify='start' className={styles.FullWidth}>\n          <ShiftList />\n        </Row>\n        <Row justify='space-between' className={styles.DateContainer}>\n          <SchedulerDatePicker />\n          <ViewMode />\n        </Row>\n      </Row>\n    </Row>\n  )\n}\n\nexport default SchedulerHeader\n","import React, { useContext } from 'react'\nimport { SchedulerDataContext } from '../index'\nimport styles from './styles.module.css'\nimport { Table } from 'antd'\n\nconst ResourcesHeader = () => {\n  const {\n    config: { resourceTitle, resourcesViewWidth }\n  } = useContext(SchedulerDataContext)\n\n  return (\n    <div\n      className={styles.ResourceViewHeader}\n      style={{ width: `${resourcesViewWidth}px` }}\n    >\n      <div className={styles.ResourceViewHeaderTableContainer}>\n        <Table\n          columns={[{ title: resourceTitle }]}\n          className={styles.ResourceViewHeaderTable}\n          bordered={false}\n        />\n      </div>\n    </div>\n  )\n}\n\nexport default ResourcesHeader\n","import React, { useContext } from 'react'\nimport { SchedulerDataContext } from '../index'\nimport { Row, Col, Avatar } from 'antd'\nimport styles from './styles.module.css'\nconst ResourceCellContent = ({ text, record }) => {\n  const {\n    config: { cellHeight },\n    displayAvatar,\n    resourceCellContent,\n    resources,\n    events\n  } = useContext(SchedulerDataContext)\n\n  // Styles\n  const style = {\n    height: `${cellHeight}px`\n  }\n  const content = resourceCellContent(record, resources, events)\n\n  const renderCellContent = (\n    <Col>\n      <p>{text}</p>\n      {resourceCellContent ? content : null}\n    </Col>\n  )\n\n  const renderAvatar = displayAvatar ? (\n    <Col style={{ marginRight: '1em' }}>\n      <Avatar size='default'>{text[0]}</Avatar>\n    </Col>\n  ) : null\n\n  return (\n    <Row\n      style={style}\n      className={styles.ResourceCellContent}\n      align='middle'\n      justify='start'\n    >\n      {renderAvatar}\n      {renderCellContent}\n    </Row>\n  )\n}\n\nexport default ResourceCellContent\n","import React, { useContext } from 'react'\nimport ResourceCellContent from './ResourceCellContent'\nimport { SchedulerDataContext } from '../index'\nimport { Table } from 'antd'\nimport styles from './styles.module.css'\nimport { ScrollSyncPane } from 'react-scroll-sync'\nconst ResourcesBody = () => {\n  const columns = [\n    {\n      title: '',\n      dataIndex: 'name',\n      key: 'id',\n      render: (text, record) => {\n        return <ResourceCellContent text={text} record={record} />\n      }\n    }\n  ]\n  const {\n    resources,\n    config: { resourcesViewWidth }\n  } = useContext(SchedulerDataContext)\n\n  return (\n    <ScrollSyncPane group='1'>\n      <div\n        className={styles.ResourceViewBody}\n        style={{ width: `${resourcesViewWidth}px`, maxHeight: '360px' }}\n      >\n        <div className={styles.ResourceViewBodyTableContainer}>\n          <Table\n            columns={columns}\n            pagination={false}\n            size='large'\n            dataSource={resources}\n            bordered={false}\n          />\n        </div>\n      </div>\n    </ScrollSyncPane>\n  )\n}\n\nexport default ResourcesBody\n","import React, { useContext } from 'react'\nimport { SchedulerDataContext } from '../index'\nimport styles from './styles.module.css'\nimport ResourceViewHeader from './ResourceViewHeader'\nimport ResourceViewBody from './ResourceViewBody'\n\nconst index = () => {\n  const {\n    config: { resourcesViewWidth }\n  } = useContext(SchedulerDataContext)\n\n  return (\n    <div\n      className={styles.ResourceView}\n      style={{ width: `${resourcesViewWidth}px` }}\n    >\n      <ResourceViewHeader />\n      <ResourceViewBody />\n    </div>\n  )\n}\n\nexport default index\n","import React, { useContext } from 'react'\nimport styles from './styles.module.css'\nimport { Table } from 'antd'\nimport { SchedulerDataContext } from '../index'\n\nconst SchedulerViewHeader = ({ days }) => {\n  const {\n    config: { schedulerViewWidth }\n  } = useContext(SchedulerDataContext)\n\n  const headerColumns = days.map((date) => ({\n    title: date.format('ddd DD/MM'),\n    width: schedulerViewWidth / 7\n  }))\n\n  return (\n    <div className={styles.SchedulerViewHeader}>\n      <div className={styles.SchedulerViewHeaderContainer}>\n        <div style={{ width: `${schedulerViewWidth}px` }}>\n          <Table\n            columns={headerColumns}\n            pagination={false}\n            bordered={false}\n            className={styles.ScheduleViewHeaderTable}\n          />\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default SchedulerViewHeader\n","export const getPadding = (paddingArr) => {\n  return `${paddingArr[0]}px ${paddingArr[1]}px ${paddingArr[2]}px ${paddingArr[3]}px`\n}\nexport const getCellHeight = (cellHeight) => {\n  return `${cellHeight}px`\n}\n","import React, { useContext } from 'react'\nimport { useDrop } from 'react-dnd'\nimport { SchedulerDataContext } from '../index'\nimport { v4 as uuidv4 } from 'uuid'\nimport { getPadding, getCellHeight } from '../shared/Method'\nimport { message } from 'antd'\nimport styles from './styles.module.css'\n\nconst Cell = ({ cellData = {}, children, date }) => {\n  const { slotId, resource } = cellData\n  // context\n  const {\n    config: {\n      cellBgColor,\n      cellBgHoverColor,\n      cellHeight,\n      cellPadding,\n      dateFormat,\n      schedulerViewWidth\n    },\n    onShiftDrop\n  } = useContext(SchedulerDataContext)\n\n  // react-dnd\n  const [{ isOver }, drop] = useDrop({\n    accept: 'shift',\n    drop: (item, monitor) => {\n      const droppedEvent = {\n        id: uuidv4(),\n        event: {\n          date: date.format(dateFormat),\n          start: item.start,\n          end: item.end,\n          shiftType: item.shiftType\n        },\n        slotId: slotId,\n        resource: resource\n      }\n      const existedShiftInCell =\n        cellData.event.filter((evt) => evt.date === date.format(dateFormat))\n          .length !== 0\n      // Check if shift already existed\n      // existed => not allow to drop new shift to the cell\n      if (cellData.length === 0 || existedShiftInCell === false) {\n        onShiftDrop(droppedEvent)\n      } else {\n        message.error('Employee already had a shift')\n      }\n    },\n    collect: (monitor) => ({\n      isOver: !!monitor.isOver()\n    })\n  })\n\n  const style = {\n    backgroundColor: isOver ? cellBgHoverColor : cellBgColor,\n    height: getCellHeight(cellHeight),\n    padding: getPadding(cellPadding),\n    width: schedulerViewWidth / 7\n  }\n  return (\n    <div ref={drop} style={style} className={styles.Cell}>\n      {children}\n    </div>\n  )\n}\n\nexport default Cell\n","import React, { useContext } from 'react'\nimport { Badge, Row, Button } from 'antd'\nimport styles from './styles.module.css'\nimport { SchedulerDataContext } from '../index'\n\nconst PopoverContent = ({ event }) => {\n  const {\n    config: { cellPopoverWidth },\n    firstAction,\n    secondAction,\n    firstActionName = 'Action 1',\n    secondActionName = 'Action 2'\n  } = useContext(SchedulerDataContext)\n  const { shiftType, start, end } = event\n  const style = {\n    width: cellPopoverWidth\n  }\n  return (\n    <Row style={style}>\n      <Row>\n        <Badge color='blue' />\n        {`${shiftType}`}\n      </Row>\n      <p className={styles.PopoverEventTime}>{`${start} - ${end}`}</p>\n      <Row>\n        <Button type='text' onClick={firstAction}>\n          {firstActionName}\n        </Button>\n        <Button type='text' onClick={secondAction}>\n          {secondActionName}\n        </Button>\n      </Row>\n    </Row>\n  )\n}\n\nexport default PopoverContent\n","import React, { useContext } from 'react'\nimport styles from './styles.module.css'\nimport { SchedulerDataContext } from '../index'\nimport { Table, Popover } from 'antd'\nimport Cell from './Cell'\nimport PopoverContent from './PopoverContent'\nimport { ScrollSyncPane } from 'react-scroll-sync'\nconst SchedulerViewBody = ({ days }) => {\n  const {\n    config: { dateFormat, schedulerViewWidth },\n    events,\n    resources,\n    resourcesList\n  } = useContext(SchedulerDataContext)\n\n  const getCurrentWeekDays = () => {\n    const renderColumns = days.map((date) => ({\n      title: '',\n      key: date.format(dateFormat),\n      dataIndex: 'event',\n      render: (text, record, index) => {\n        const { event } = record\n        const eventOnThisDate = event.filter(\n          (item) => item.date === date.format(dateFormat)\n        )\n        const eventExisted = eventOnThisDate.length !== 0\n        // Only display record that has the exactly startDate and slotId\n        if (eventExisted) {\n          return event.map((evt, i) => {\n            try {\n              if (\n                evt.date === date.format(dateFormat) &&\n                evt.slotId === index\n              ) {\n                return (\n                  <Popover\n                    content={<PopoverContent event={evt} />}\n                    placement='bottom'\n                    trigger='hover'\n                  >\n                    <div>\n                      <Cell key={index} cellData={record} date={date}>\n                        {evt.shiftType}\n                      </Cell>\n                    </div>\n                  </Popover>\n                )\n              }\n              return null\n            } catch (ignore) {}\n          })\n        }\n        return <Cell key={index} cellData={record} date={date} />\n      }\n    }))\n    return renderColumns\n  }\n\n  const columnData = []\n\n  // Initialize columns data with slotId and empty event\n  for (let i = 0; i < resources.length; i++) {\n    columnData.push({\n      slotId: i,\n      event: [],\n      resource: resourcesList[i]\n    })\n  }\n\n  events.forEach((evt) => {\n    columnData[evt.slotId].event.push({\n      ...evt.event,\n      id: evt.id,\n      slotId: evt.slotId,\n      resource: evt.resource\n    })\n  })\n\n  return (\n    <ScrollSyncPane group='1'>\n      <div className={styles.SchedulerViewContent}>\n        <div\n          style={{\n            width: `${schedulerViewWidth}px`,\n            maxHeight: '360px'\n          }}\n        >\n          <Table\n            size='large'\n            columns={getCurrentWeekDays()}\n            dataSource={columnData}\n            pagination={false}\n            bordered={false}\n            className={styles.ScheduleViewBodyTable}\n          />\n        </div>\n      </div>\n    </ScrollSyncPane>\n  )\n}\n\nexport default SchedulerViewBody\n","import React, { useContext } from 'react'\nimport { SchedulerDataContext } from '../index'\nimport moment from 'moment'\nimport styles from './styles.module.css'\nimport SchedulerViewHeader from './SchedulerViewHeader'\nimport SchedulerViewBody from './SchedulerViewBody'\n\nconst Header = () => {\n  const {\n    config: { currentDate, schedulerViewWidth }\n  } = useContext(SchedulerDataContext)\n  const weekStart = moment(currentDate).startOf('week')\n  const days = []\n  for (let i = 0; i <= 6; i++) {\n    days.push(moment(weekStart).add(i, 'days'))\n  }\n  return (\n    <div\n      className={styles.SchedulerView}\n      style={{\n        width: `${schedulerViewWidth + 1}px`\n      }}\n    >\n      <SchedulerViewHeader days={days} />\n      <SchedulerViewBody days={days} />\n    </div>\n  )\n}\n\nexport default Header\n","import React, { createContext, useState, useEffect } from 'react'\nimport '../node_modules/antd/dist/antd.min.css'\nimport styles from './styles.module.css'\nimport SchedulerHeader from './SchedulerHeader/index'\nimport ResourceView from './ResourceView/index'\nimport SchedulerView from './SchedulerView/index'\nimport { DndProvider } from 'react-dnd'\nimport { HTML5Backend } from 'react-dnd-html5-backend'\nimport moment from 'moment'\nimport { ScrollSync } from 'react-scroll-sync'\nconst Scheduler = ({\n  resources,\n  shiftTypes,\n  events: userEvents,\n  resourceCellContent,\n  displayAvatar,\n  config: userConfig,\n  firstAction,\n  secondAction,\n  firstActionName,\n  secondActionName,\n  onShiftDrop,\n  getSchedulerData\n}) => {\n  // Determine window width\n  const [windowWidth, setWindowWidth] = useState(window.innerWidth)\n  window.addEventListener('resize', () =>\n    setWindowWidth(Math.floor(window.innerWidth))\n  )\n\n  // Create an array of resources\n  const resourcesList = resources.map((item) => item.name)\n\n  // Add slotId attribute depend on the resouce\n  const formattedUserEvents =\n    !!userEvents &&\n    userEvents.map((evt) => ({\n      ...evt,\n      slotId: resourcesList.indexOf(evt.resource)\n    }))\n\n  // Calculate scheduler size base on viewport\n  const schedulerWidth = windowWidth * 0.9\n  const resourcesViewWidth =\n    Math.floor(windowWidth * 0.9) -\n    Math.floor((windowWidth * 0.9 * 0.8) / 7) * 7\n  const schedulerViewWidth = Math.floor((windowWidth * 0.9 * 0.8) / 7) * 7\n\n  // Config\n  const [config, setConfig] = useState({\n    currentDate: moment(),\n    locale: 'en',\n    schedulerTitle: 'React simple scheduler',\n    schedulerWidth: windowWidth * 0.9,\n    resourcesViewWidth: resourcesViewWidth,\n    schedulerViewWidth: schedulerViewWidth,\n    cellBgColor: '#ffffff',\n    cellBgHoverColor: '#fafafa',\n    cellHeight: 55,\n    cellPadding: [8, 12, 8, 12],\n    dateFormat: 'DD/MM/YYYY',\n    cellPopoverWidth: '200px',\n    resourceTitle: 'Resources',\n    view: [{ viewName: 'Week', viewType: ViewTypes.Week }],\n    ...userConfig\n  })\n\n  moment.locale(config.locale)\n\n  const updateConfig = (args) => {\n    setConfig((prev) => ({ ...prev, ...args }))\n  }\n\n  const SchedulerData = {\n    // Settings\n    config: config,\n    resources: resources,\n    events: formattedUserEvents,\n    shiftTypes: shiftTypes,\n    resourcesList: resourcesList,\n    displayAvatar: displayAvatar,\n    windowWidth: windowWidth,\n\n    // Actions\n    updateConfig: updateConfig,\n    onShiftDrop: onShiftDrop,\n    resourceCellContent: resourceCellContent,\n    firstAction: firstAction,\n    secondAction: secondAction,\n    firstActionName: firstActionName || 'Action 1',\n    secondActionName: secondActionName || 'Action 2'\n  }\n\n  // Scheduler data getter function\n  useEffect(() => {\n    getSchedulerData(SchedulerData)\n  }, [SchedulerData])\n\n  return (\n    <DndProvider backend={HTML5Backend}>\n      <SchedulerDataContext.Provider value={SchedulerData}>\n        <ScrollSync>\n          <div\n            className={styles.Scheduler}\n            style={{ width: `${schedulerWidth}px` }}\n          >\n            <table>\n              <thead>\n                <tr>\n                  <td colSpan='2'>\n                    <SchedulerHeader />\n                  </td>\n                </tr>\n              </thead>\n              <tbody>\n                <tr>\n                  <td style={{ width: `${resourcesViewWidth}px` }}>\n                    <ResourceView />\n                  </td>\n                  <td style={{ width: `${schedulerViewWidth}px` }}>\n                    <SchedulerView />\n                  </td>\n                </tr>\n              </tbody>\n            </table>\n          </div>\n        </ScrollSync>\n      </SchedulerDataContext.Provider>\n    </DndProvider>\n  )\n}\n\nexport const SchedulerDataContext = createContext(null)\nexport const ViewTypes = {\n  Day: 'day',\n  Week: 'week',\n  Month: 'month'\n}\n\nexport default Scheduler\n","export const sampleEvents = [\n  {\n    id: 0,\n    event: {\n      date: '05/08/2020',\n      shiftType: 'Shift 1',\n      start: '19:00',\n      end: '23:30'\n    },\n    resource: 'Pham Duc Minh Pham Duc Minh Pham Duc Minh'\n  },\n  {\n    id: 1,\n    event: {\n      date: '05/08/2020',\n      start: '06:30',\n      end: '11:30',\n      shiftType: 'Shift 2'\n    },\n    resource: 'Huynh Lam'\n  },\n  {\n    id: 2,\n    event: {\n      date: '06/08/2020',\n      start: '06:30',\n      end: '11:30',\n      shiftType: 'Shift 3'\n    },\n    resource: 'Huynh Lam'\n  },\n  {\n    id: 3,\n    event: {\n      date: '06/07/2020',\n      start: '06:30',\n      end: '11:30',\n      shiftType: 'Shift 1'\n    },\n    resource: 'Huynh Lam'\n  },\n  {\n    id: 4,\n    event: {\n      date: '09/08/2020',\n      start: '06:30',\n      end: '11:30',\n      shiftType: 'Shift 2'\n    },\n    resource: 'Hoang Thi Thu Hien'\n  },\n  {\n    id: 5,\n    event: {\n      date: '07/08/2020',\n      start: '06:30',\n      end: '11:30',\n      shiftType: 'Shift 3'\n    },\n    resource: 'Hoang Thi Thu Hien'\n  }\n]\n\nexport const sampleShiftTypes = [\n  {\n    id: 0,\n    name: 'Shift 1',\n    start: '6:30',\n    end: '11:30'\n  },\n  {\n    id: 1,\n    name: 'Shift 2',\n    start: '11:00',\n    end: '16:00'\n  },\n  {\n    id: 2,\n    name: 'Shift 3',\n    start: '15:00',\n    end: '20:00'\n  },\n  {\n    id: 3,\n    name: 'Shift 4',\n    start: '19:00',\n    end: '23:30'\n  }\n]\n\nexport const sampleResources = [\n  {\n    name: 'Pham Duc Minh Pham Duc Minh Pham Duc Minh',\n    role: 'Team Lead',\n    id: 0\n  },\n  {\n    name: 'Huynh Lam',\n    id: 1,\n    role: 'DevOps Engineer'\n  },\n  {\n    name: 'Hoang Thi Thu Hien',\n    id: 2,\n    role: 'Admin'\n  },\n  {\n    name: 'Ngo Duc Duy',\n    id: 3,\n    role: 'BASIS'\n  },\n  {\n    name: 'Ngo Duc Duy',\n    id: 4,\n    role: 'BASIS'\n  },\n  {\n    name: 'Ngo Duc Duy',\n    id: 5,\n    role: 'BASIS'\n  },\n  {\n    name: 'Ngo Duc Duy',\n    id: 6,\n    role: 'BASIS'\n  },\n  {\n    name: 'Ngo Duc Duy',\n    id: 7,\n    role: 'BASIS'\n  },\n  {\n    name: 'Ngo Duc Duy',\n    id: 8,\n    role: 'BASIS'\n  },\n  {\n    name: 'Ngo Duc Duy',\n    id: 9,\n    role: 'BASIS'\n  },\n  {\n    name: 'Ngo Duc Duy',\n    id: 10,\n    role: 'BASIS'\n  },\n  {\n    name: 'Ngo Duc Duy',\n    id: 11,\n    role: 'BASIS'\n  },\n  {\n    name: 'Ngo Duc Duy',\n    id: 12,\n    role: 'BASIS'\n  }\n]\n","import React, { useState } from 'react'\nimport Scheduler from 'react-scheduler'\nimport 'react-scheduler/dist/index.css'\nimport 'react-scheduler/node_modules/antd/dist/antd.min.css'\nimport 'react-scheduler/node_modules/react-dnd'\nimport 'react-scheduler/node_modules/react-dnd-html5-backend'\nimport moment from 'react-scheduler/node_modules/moment'\nimport { message } from 'antd'\nimport { sampleEvents, sampleShiftTypes, sampleResources } from './SampleData'\nimport './index.css'\n\nconst App = () => {\n  const config = {\n    cellHeight: '65',\n    currentDate: moment('05/08/2020', 'DD/MM/YYYY')\n  }\n  const [data, setData] = useState({\n    events: sampleEvents,\n    shiftTypes: sampleShiftTypes,\n    resources: sampleResources\n  })\n  const { events, shiftTypes, resources } = data\n\n  const resourceCellContent = (record, resources, events) => {\n    const dateFormat = 'DD/MM/YYYY'\n    const startOfMonth = moment().startOf('month')\n    const endOfMonth = moment().endOf('month')\n    const resourceCellContentStyle = {\n      fontSize: '10px',\n      display: 'block'\n    }\n    const pStyle = {\n      margin: '0'\n    }\n\n    const shiftInMonth = events.filter(\n      (item) =>\n        item.resource === record.name &&\n        startOfMonth < moment(item.event.start, dateFormat) &&\n        moment(item.event.start, dateFormat) < endOfMonth\n    )\n    return (\n      <div style={resourceCellContentStyle}>\n        <p style={pStyle}>{record.role}</p>\n        <p style={pStyle}>{`Số ca trong tháng: ${shiftInMonth.length}`}</p>\n      </div>\n    )\n  }\n  const firstAction = () => {\n    message.success('Action 1')\n  }\n\n  const secondAction = () => {\n    message.success('Action 2')\n  }\n\n  const onShiftDrop = (event) => {\n    message.success(JSON.stringify(event))\n    setData((prev) => ({ ...prev, events: [...prev.events, event] }))\n  }\n\n  const getSchedulerData = (schedulerData) => {\n    console.log(schedulerData)\n  }\n\n  return (\n    <div className='ScheudlerContainer'>\n      <Scheduler\n        events={events}\n        resources={resources}\n        shiftTypes={shiftTypes}\n        displayAvatar={true}\n        resourceCellContent={resourceCellContent}\n        config={config}\n        firstAction={firstAction}\n        secondAction={secondAction}\n        firstActionName={'Delete'}\n        secondActionName={'Swap'}\n        onShiftDrop={onShiftDrop}\n        getSchedulerData={getSchedulerData}\n      />\n    </div>\n  )\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}